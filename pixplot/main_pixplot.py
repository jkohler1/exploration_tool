import os
import time
import pickle
import argparse
import random
import json

n = random.random()

current_folder = os.getcwd()

config = {
    'project_dir': current_folder,
    'n': n,
    'slide': None,
    'tile_dir': os.path.join(current_folder, f'tiles_{n}'),
    'latent_dir': os.path.join(current_folder, f'results_{n}'),
    'pixplot_in_dir': os.path.join(current_folder, f'pixplot_input_{n}'),
    'pixplot_out_dir_all': None,
    'pyramid_dir': os.path.join(current_folder, f'pyramid_{n}'),
    'inv_dir': os.path.join(current_folder, f'inv_{n}'),
    'tile_size': 224,
    'tile_resize': 224,
    'seg': True,
    'ndpi': False,
    'processing_unit': 'cuda:2',
    'batch_size': 8,
    'num_workers': 20,
    'tiling_nw': 40, 
    'max_bg_frac': 0.5,
    'model': None,
    'timm_model': None,
    'dino_model': None,
    'dino2_model': None,
    'clip_model': None,
    'model_name': None,
    'suffix_folder':'svs',
    'suffix_file':'csv',
    'no_valid_model': False,
    'cell_size': 16,
    'pc_sampled': 0.05,
    'zoom': 0.5,
    'set_seed': 520,
    'len_name': 0
}

def parse():
    '''Read command line args and begin data processing'''
    description = 'Create the data required to create a PixPlot viewer'
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--tiling', '-t', action='store_true', help='do tiling', required=False)
    parser.add_argument('--inference', '-i', action='store_true', help='do inference', required=False)
    parser.add_argument('--pixplot', '-p', action='store_true', help='do pixplot', required=False)
    parser.add_argument('--clean_inv', '-cin', action='store_true', help='clean generated inversed image at the end', required=False)
    parser.add_argument('--clean_pyramid', '-cpy', action='store_true', help='clean generated pyramid image at the end', required=False)
    parser.add_argument('--clean_tiling', '-ct', action='store_true', help='clean generated tiles at the end', required=False)
    parser.add_argument('--clean_inference', '-ci', action='store_true', help='clean generated latent space at the end', required=False)
    parser.add_argument('--clean_pixplot', '-cp', action='store_true', help='clean generated pixplot input file at the end', required=False)
    parser.add_argument('--slide', '-s', type=str, nargs='+', help='path(s) to slide(s) or folder containing slide(s)')
    parser.add_argument('--model', '-m', type=str, default=config['model'], help='path to model', required=False)
    parser.add_argument('--timm_model', '-tm', type=str, default=config['timm_model'], help='model name from timm', required=False)
    parser.add_argument('--dino_model', '-dm', type=str, default=config['dino_model'], help='model name from dino', required=False)
    parser.add_argument('--dino2_model', '-d2m', type=str, default=config['dino2_model'], help='model name from dino2', required=False)
    parser.add_argument('--clip_model', '-cm', type=str, default=config['clip_model'], help='model name from clip', required=False)
    parser.add_argument('--tile_dir', '-td', type=str, default=config['tile_dir'], help='path to tiles folder if wiling to keep tiles generated', required=False)
    parser.add_argument('--tile_size', '-ts', type=int, default=config['tile_size'], help='size of tiles to be generated by tiling', required=False)
    parser.add_argument('--tile_resize', '-tr', type=int, default=config['tile_resize'], help='size to which the generated tiles will be resized', required=False)
    parser.add_argument('--no_seg', '-nsg', dest='seg', action='store_false', help='not do segmentation before tiling', required=False)
    parser.add_argument('--ndpi', '-ndpi', dest='npdi', action='store_true', help='npdi format', required=False)
    #parser.add_argument('--bg_th', '-bgth', type=int, default=config['bg_th'], help='intensities above this will be treated as background', required=False)
    parser.add_argument('--max_bg_frac', '-mbgfr', type=float, default=config['max_bg_frac'], help='tiles with more background pixels than this fraction will not be saved to the disk', required=False)
    parser.add_argument('--tiling_nw', '-tnw', type=int, default=config['tiling_nw'], help='number of workers used for tiling', required=False)
    parser.add_argument('--cell_size', '-cs', type=int, default=config['cell_size'], help='cell_size argument value in pixplot command', required=False)
    parser.add_argument('--latent_dir', '-ld', type=str, default=config['latent_dir'], help='path to latent folder if wiling to keep tiles generated', required=False)
    parser.add_argument('--pixplot_in_dir', '-pid', type=str, default=config['pixplot_in_dir'], help='path to pixplot input folder', required=False)
    parser.add_argument('--processing_unit', '-pu', type=str, default=config['processing_unit'], help='cpu or specify cuda location', required=False)
    parser.add_argument('--batch_size', '-bs', type=int, default=config['batch_size'], help='batch size to be loaded during model inference', required=False)
    parser.add_argument('--num_workers', '-nw', type=int, default=config['num_workers'], help='number of workers used for model inference', required=False)
    parser.add_argument('--len_name', '-ln', type=int, default=config['len_name'], help='length of name (in number of letters) to be used to distinguish the slides', required=False)

    config.update(vars(parser.parse_args()))

def clean_inv(**config):
    os.system(f"rm -r {config['inv_dir']}")
    print('Inversed image cleaned')      
    
def clean_pyramid(**config):
    os.system(f"rm -r {config['pyramid_dir']}")
    print('Pyramids cleaned')  
    
def clean_tiles(**config):
    #print(config['tile_dir'])
    if config['tile_dir'] == os.path.join(current_folder, f'tiles_{n}'):
        os.system(f"rm -r {config['tile_dir']}")
        print('Tiles cleaned')  
    else:
        print("Tiles folder is not the default folder, can't be cleaned for security")
        
def clean_latent(**config):
    if config['latent_dir'] == os.path.join(current_folder, f'results_{n}'):
        os.system(f"rm -r {config['latent_dir']}")
        print('Latent space data cleaned')
    else:
        print("Latent space folder is not the default folder, can't be cleaned for security")

def clean_pixplot(**config):
    if config['pixplot_in_dir'] == os.path.join(current_folder, f'pixplot_input_{n}'):
        os.system(f"rm -r {config['pixplot_in_dir']}")
        print('Pixplot input file cleaned') 
    else:
        print("Pixplot input file folder is not the default folder, can't be cleaned for security")

if __name__ == '__main__':
    print('The pixplot pipeline has started')
    t0t = time.time()
    parse()
    out_file = open("config.json", "w") 
    json.dump(config, out_file, indent=2) 
    out_file.close() 
    #pickle.dump(config, open(os.path.join(current_folder, 'config.json'), "wb"))
    
    #os.system("singularity exec --nv /mnt/iribhm/software/singularity/pytorch-lightning-02-17-2023.img.bkp python3 pixplot_pipeline.py")
    os.system("singularity exec --nv /mnt/iribhm/software/singularity/pytorch-lightning.img python3 pixplot_pipeline.py")
    #os.system("singularity exec --nv /mnt/iribhm/software/singularity/pytorch-lightning.img python3 pixplot_pipeline-Copy1.py")
    #os.system("singularity exec --nv /mnt/iribhm/people/vdetours/vms/DeepDPM python3 pixplot_pipeline.py")
    
    #os.system("singularity exec /mnt/iribhm/software/singularity/pytorch-lightning.img python pixplot_pipeline.py")
    config=json.load(open(os.path.join(current_folder, 'config.json'), "r"))
    #print(config)
    len_name = config['len_name']
    if config['pixplot']==True and config['all_slide_names'] != None:
        count = len(config['all_slide_names'])
        summary_file_name = f"summary_{n}.html"
        file_html = open(summary_file_name, "w")
        file_html.write('''<html>
        <head>
        <title>HTML File</title>
        </head> 
        <body>
        <h1>IRIBHM spatial transcriptomic slides</h1>
        ''')
        file_html.write(f"<p>AI model : {config['model_name']}<p>")
        file_html.write(f"<p>Resolution {config['tile_size']}<p>")
        file_html.close()
        for i in range(count):
            slide_name = config['all_slide_names'][i]
            #tiles_metadata_file = config['all_tiles_metadata_files'][i]
            pixplot_input_file = config['all_pixplot_input_files'][i]
            model_name = config['model_name']
            if '/' in config['model_name']:
                model_name = config['model_name'].replace("/","_")
            if len_name!=0:
                pixplot_out_dir = os.path.splitext(slide_name)[0][:(len_name+1)] + '_' + model_name + '_' + str(config['tile_size'])  + '_' + str(n)
            else:
                pixplot_out_dir = os.path.splitext(slide_name)[0] + '_' + model_name + '_' + str(config['tile_size'])   + '_' + str(n)
            print(f'The pixplot output folder "{pixplot_out_dir}" is being generated.')  
            pixel_slide = config['all_pixel_slides'][i]
            pixplot_input_file = config['all_pixplot_input_files'][i]
            images_path_suffix = pixel_slide + '/' + f'processing/tiles/{slide_name}_tile_*png'
            images_path = os.path.join(config['tile_dir'], images_path_suffix)
            cell_size = config['cell_size']
            t0 = time.time()
            #print((f'singularity exec /mnt/iribhm/software/singularity/pixplot.sif pixplot --metadata "{pixplot_input_file}" --images "{images_path}" --out_dir "{pixplot_out_dir}" --cell_size {cell_size}'))
            os.system(f'singularity exec /mnt/iribhm/software/singularity/pixplot.sif pixplot --metadata "{pixplot_input_file}" --images "{images_path}" --out_dir "{pixplot_out_dir}" --cell_size {cell_size}')
            pixplot_out_dir_i = pixplot_out_dir
            if ' ' in pixplot_out_dir:
                pixplot_out_dir = pixplot_out_dir.replace(" ","\ ")
            if config['pixplot_out_dir_all'] != None:
                pixplot_out_dir_all_name = os.path.basename(config['pixplot_out_dir_all'])
                os.system(f"mv {pixplot_out_dir} {config['pixplot_out_dir_all']}")
                # Creating the HTML file
                file_html = open(f"summary_{n}.html", "a")
                # Adding the input data to the HTML file
                file_html.write(f'<a href="https://www-hpda.ulb.ac.be/iribhm/ai/morphological-space/{pixplot_out_dir_all_name}/{pixplot_out_dir_i}/#">{slide_name}<br></a>')
            else:
                os.system(f'mv {pixplot_out_dir} /mnt/iribhm/public/www/ai/morphological-space/')
                print(f'The pixplot output folder "{pixplot_out_dir}" has been moved to "morphological-space" for visualization, you can now open in the browser https://www-hpda.ulb.ac.be/iribhm/ai/morphological-space/{pixplot_out_dir_i}/#') 
                # Creating the HTML file
                file_html = open(f"summary_{n}.html", "a")
                # Adding the input data to the HTML file
                file_html.write(f'<a href="https://www-hpda.ulb.ac.be/iribhm/ai/morphological-space/{pixplot_out_dir_i}/#">{slide_name}<br></a>')
            tf = time.time() - t0
            print(f'Pixplot output folder generation time: {tf:.2f}s')
        file_html.write('''
        </body>
        </html>''')
        file_html.close()
        if config['pixplot_out_dir_all'] != None:
            #print(file_html)
            #print(config['pixplot_out_dir_all'])
            #print(f"mv {summary_file_name} {config['pixplot_out_dir_all']}/index.html")
            os.system(f"mv {summary_file_name} {config['pixplot_out_dir_all']}/index.html")
            os.system(f"mv {config['pixplot_out_dir_all']} /mnt/iribhm/public/www/ai/morphological-space/")
            print(f'The pixplot output folder "{pixplot_out_dir_all_name}" has been moved to "morphological-space" for visualization, you can now open in the browser https://www-hpda.ulb.ac.be/iribhm/ai/morphological-space/{pixplot_out_dir_all_name}/#') 
            
            
    if config['clean_pixplot'] or config['clean_inference'] or config['clean_tiling']:                                  
        print("The cleaning step has started, only data generated in default paths in current folder will be cleaned")  
        if config['clean_inv']==True:
            clean_inv(**config)
        
        if config['clean_pyramid']==True:
            clean_pyramid(**config)
        
        if config['clean_tiling']==True:
            clean_tiles(**config)
   
        if config['clean_inference']==True:
            clean_latent(**config)

        if config['clean_pixplot']==True:
            clean_pixplot(**config)
                                    
    
    tft = time.time() - t0t
    print(f'Total time: {tft:.2f}s')

        
