import os
import time
import pickle
import argparse
from datetime import datetime
import json


id = datetime.now().isoformat()
current_folder = os.getcwd()

config = {
    'project_dir': current_folder,
    'id': id,
    'slide': None,
    'output_dir': os.path.join(current_folder, f'output/output_folder_{id}'),  #Default Output Directory
    'tile_size': 224,
    'tile_resize': 224,
    'seg': True,
    'ndpi': False,
    'processing_unit': 'cuda:2',
    'batch_size': 8,
    'num_workers': 20,
    'tiling_nw': 40, 
    'max_bg_frac': 0.5,
    'model': None,
    'suffix_folder':'svs',
    'suffix_file':'csv',
    'cell_size': 16,
    'pc_sampled': 0.05,
    'zoom': 0.5,
    'set_seed': 520,
    'len_name': 0,
    'default_model':'resnet18',
    'tiling' : True,
    'inference' : True,
    'inference_inputs' : [],
    'dimensionality_reduction' : [],
    'default_clustering' : False,
    'web' : 'no_name'
}

def parse():
    '''Read command line args and begin data processing'''
    description = 'Create the data required to create a PixPlot viewer'
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--slide', '-s', type=str, nargs='+', help='path(s) to slide(s) or folder containing slide(s)')
    parser.add_argument('--model_type', '-mt', type=str,nargs='+',default=config['default_model'], help='model name (timm,dino,dino2,clip,resnet18)', required=False)
    parser.add_argument('--model_name', '-mn', type=str,nargs='+', help='model name', required=True)
    parser.add_argument('--default_clustering', '-dc', type=bool, help='If set to true, default clustering apply with dbscan for the first model with the first reduc dim', required=False)
    parser.add_argument('--dimensionality_reduction', '-dr', type=str,nargs='+', help='dimensionality reduction(umap,tsne)', required=True)
    parser.add_argument('--output_dir', '-out', type=str, default=config['output_dir'], help='Output directory', required=False) #Output directory
    parser.add_argument('--inference_inputs', '-td', type=str, default=config['inference_inputs'], help='Input inference folder (only if inference only)', required=False)
    parser.add_argument('--tile_size', '-ts', type=int, default=config['tile_size'], help='size of tiles to be generated by tiling', required=False)
    parser.add_argument('--tile_resize', '-tr', type=int, default=config['tile_resize'], help='size to which the generated tiles will be resized', required=False)
    parser.add_argument('--no_seg', '-nsg', dest='seg', action='store_false', help='not do segmentation before tiling', required=False)
    parser.add_argument('--ndpi', '-ndpi', dest='npdi', action='store_true', help='npdi format', required=False)
    parser.add_argument('--max_bg_frac', '-mbgfr', type=float, default=config['max_bg_frac'], help='tiles with more background pixels than this fraction will not be saved to the disk', required=False)
    parser.add_argument('--tiling_nw', '-tnw', type=int, default=config['tiling_nw'], help='number of workers used for tiling', required=False)
    parser.add_argument('--cell_size', '-cs', type=int, default=config['cell_size'], help='cell_size argument value in pixplot command', required=False)
    parser.add_argument('--processing_unit', '-pu', type=str, default=config['processing_unit'], help='cpu or specify cuda location', required=False)
    parser.add_argument('--batch_size', '-bs', type=int, default=config['batch_size'], help='batch size to be loaded during model inference', required=False)
    parser.add_argument('--num_workers', '-nw', type=int, default=config['num_workers'], help='number of workers used for model inference', required=False)
    parser.add_argument('--len_name', '-ln', type=int, default=config['len_name'], help='length of name (in number of letters) to be used to distinguish the slides', required=False)
    parser.add_argument('--tiling', '-t', type=bool, default=config['tiling'], help='Tiling on input file', required=False)
    parser.add_argument('--inference', '-i', type=bool, default=config['inference'], help='Inference on input file', required=False)
    parser.add_argument('--web', '-web', type=str, default=config['web'], help='Web path name', required=False)
    config.update(vars(parser.parse_args()))




if __name__ == '__main__':
    print('The pixplot pipeline has started')
    t0t = time.time()
    parse()
    out_file = open("config.json", "w") 
    json.dump(config, out_file, indent=2) 
    out_file.close() 
    os.system("singularity exec --nv /mnt/iribhm/software/singularity/pytorch-lightning.img python3 pixplot_pipeline_v2.py") #launch pipeline with current configuation store in config.json
    tft = time.time() - t0t
    print(f'Total time: {tft:.2f}s')
    
